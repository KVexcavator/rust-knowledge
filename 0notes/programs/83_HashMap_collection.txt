Хранение ключей со связанными значениями в хеш-отображениях
===========================
HashMap<K, V> 
- хранит отображение ключей типа K в значения типа V
- хранят данные в куче
- у всех ключей должен быть один и тот же тип, и у всех значений тоже должен быть один и тот же тип
===========================
Создание нового хеш-отображения и вставка нескольких ключей и значений
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Синяя"), 10);
scores.insert(String::from("Красная"), 50);
---------------------------
построение хеш-отображения с использованием метода collect в векторе кортежей
use std::collections::HashMap;

let teams = vec![String::from("Синяя"), String::from("Красная")];
let initial_scores = vec![10, 50];

let scores: HashMap<_, _> = teams.iter().zip(initial_scores.iter()).collect();
* collect может производить сборку в целый ряд разных структур данных, поэтому тип HashMap<_, _> обязателен 
---------------------------------
Для типов, реализующих типаж Copy, таких как i32, значения копируются внутрь хеш-отображения. Для обладаемых значений, таких как String, значения будут перемещены, а хеш-отображение будет владельцем этих значений
================================
Доступ к значениям в хеш-отображении
use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Синяя"), 10);
scores.insert(String::from("Красная"), 50);

let team_name = String::from("Синяя");
let score = scores.get(&team_name);
* get возвращает Option<&V>
* вернется или Some(&10) или None
--------------------------
можно перебрать каждую пару
for (key, value) in &scores {
  println!("{}: {}", key, value);
}
=============================
Обновление хеш-отображения
-----------------------------
Замена сохраненного значения с конкретным ключом

scores.insert(String::from("Синяя"), 10);
scores.insert(String::from("Синяя"), 25);
-----------------------------
Использование метода entry для вставки, только если ключ еще не имеет значения

scores.entry(String::from("Синяя")).or_insert(50);
------------------------------
Подсчет числа вхождений слов с помощью хеш-отображения, которое хранит слова и количества
use std::collections::HashMap;

let text = "здравствуй мир, чудесный мир";
let mut map = HashMap::new();

for word in text.split_whitespace(){
  let count = map.entry(word).or_insert(0);
  *count += 1;
}