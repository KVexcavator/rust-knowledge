Общие коллекции
https://doc.rust-lang.org/stable/std/collections/
============================
Вектор Vec<T>
- Позволяют хранить более одного значения в одной структуре данных, которая помещает все значения рядом в памяти. 
- Хра­нят значения только одного типа.
-----------------------------
Создание нового пустого вектора для хранения значений типа i32
let v: Vec<i32> = Vec::new();
-----------------------------
Создание нового вектора, содержащего значения
let v = vec![1, 2, 3];
------------------------------
Использование метода push для добавления значений в вектор
let mut v = Vec::new();
v.push(3);
------------------------------
Как и любая другая структура, вектор высвобождается, когда он выходит из об­ласти видимости.
-------------------------------
Чтение элементов вектора или по индексу или метод get
let v = vec![1,2,3,4,5];

let third: &i32 = &v[2];
println!("Третий элеиент равен {}", third);

match v.get(2) {
  Some(third) => println!("Третий элеиент равен {}", third),
  None => println!("Третий элемент отсутствует"),
}
- векторы индексируются по числу, начиная с нуля
- исплозуется ссылка и на индекс и на вектор
-------------------------------
Попытка обратиться к несуществующему елементу
let does_not_exist = &v[100]; -> panic и аварийное завершение
let does_not_exist = v.get(100); здесь вернётся None без паники
================================
Перебор значений в векторе
--------------------------------
Печать каждого элемента в векторе путем перебора элементов с помощью цикла for
let v = vec![100, 32, 57];
for i in &v {
  println!("{}", i);
}
--------------------------------
Перебор изменяемых ссылок, указывающих на элементы в векторе
let mut v = vec![100, 32, 57];
for i in &mut v {
  *i += 50;
}
* оператор разыменования (*), чтобы получить значение в i перед тем, как использовать оператор +=
================================
Использование перечисления для хранения
нескольких типов
векторы хранят значения только одного типа
ког­да нужно сохранить элементы другого типа в векторе, можно определить и использовать перечисление

emum SpreadsheetCell {
  Int(i32),
  Float(f64),
  Text(String),
}

let row = vec! [
  SpreadsheetCell::Int(3),
  SpreadsheetCell::Text(String::from("синий")),
  SpreadsheetCell::Float(10.12),
]