Структура, или struct, — это настраиваемый тип данных, который позволяет именовать и упаковывать вместе несколько связанных значений, составляющих смысловую группу.
================================
Определение и инстанцирование структур
struct User {
  username: String,
  email: String,
  sign_in_count: u64,
  active: bool
}
---------------------------------
Создание экземпляра структуры User
let user1 = User {
  email: String::from("someone@example.com"),
  username: String::from("someusername123"),
  active: true,
  sign_in_count: 1,
}
---------------------------------
Изменение значения
let mut user1 = ...
user1.email = String::from("anotheremail@example.com);
* Rust не позво­ляет помечать только определенные поля как изменяемые
---------------------------------
пример функции для посторения экземпляра
fn build_user(email: String, username: String) -> User {
  User {
    email: email,
    username: username,
    active: true,
    sign_in_count: 1,
  }
}
или с краткой инициализацией
fn build_user(email: String, username: String) -> User {
  User {
    email,
    username,
    active: true,
    sign_in_count: 1,
  }
}
==================================
Кортежные структуры
У них нет имен, связанных с их полями. Вместо этого они имеют типы полей.

struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

let black = Color(0,0,0);
let origin= Point(0,0,0);
====================================
Unit-подобные структуры без полей
это пустые структуры
====================================
Владение данными в структурах
что бы применить н еобладаемый тип String, a срезовый &str, например:
struct User {
  username: &str,
  email: &str, ...
нужно определять жизнение циклы, которые обеспечивают, чтобы данные, на которые структура ссылается, были действительными до тех пор, пока она существует
=================================
Oтладкa
#[derive(Debug)]
struct Rectangle { ...
тогда напечатает
println!("rect1 равен {:?}", rect1);

Когда есть более крупные структуры, можно исползовать {:#?}
* Rust предоставляет несколько типажей для использования с аннотацией derive
==================================