String
строки реа­лизованы как коллекция байтов
============================
Тип String, который предусмотрен стандартной библиотекой Rust, а не закодиро­ван в языке, является наращиваемым, изменяемым, обладаемым строковым типом в кодировке UTF-8.
Стандартная библиотека также включает в себя ряд других строковых типов, та­ких как OsString, OsStr, CString и CStr.
=============================
Создание нового экземпляра типа String
let mut s = String::new();
-----------------------------
Использование метода to_string для создания экземпляра типа String из строкового литерала
let data = "начальное состояние";
let s = data.to_string();
или можно так
let s = "начальное состояние".to_string();
-------------------------------
Использование функции String::from для создания экземпляра типа String из строкового литерала
let s = String::from("начальное содержимое");
* String::from и to_string делают одно и то же
===============================
Обновление строки
-------------------------------
Добавление строкового среза в конец значения типа String с помощью метода push_str
let mut s = String::from("foo");
s.push_str("bar");
------------------------------
Добавление одного символа в значение типа String с помощью push
let mut s = String::from("lo");
s.push('l'); -> lol
-----------------------------
Конкатенация с помощью оператора +
let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2
* s1 перносится в s3 и помирает
-----------------------------
Если нам нужно конкатенировать несколько строк, то результат работы с операто­ром + становится громоздким
let s = s1 + "-" + &s2 + "-" + &s3;
-----------------------------
format! для более сложного комбини­рования строк
let s = format("{}-{}-{}, s1, s2, s3);
* ничего не печатает
* возвращает экземпляр типа String с его содержимым
==============================
Индексирование в строках
------------------------------
строки Rust не поддержи­вают индексирование
let s1 = String::from("hello");
let h = s1[0]; -> Error
------------------------------
Внутреннее представление
Тип String представляет собой обертку для Vec<u8>.
let len = String::from("Hola").len();
- вернёт 4(байта),байт на букву, для кирилических букв понадобиться 2 байта и тд
- индекс в байты строки не всегда будет
коррелировать с допустимым скалярным значением Юникода
-----------------------------
с точки зрения Rust есть три релевантных способа рассматривать строки: как байты, как скалярные значения и как графемные кластеры
----------------------------
Для того чтобы быть точнее при индек­сировании и указать, что вам нужен строковый срез,  используют [] с интервалом, создав строковый срез, содержащий отдельные байты
let hello = "Здравствуйте";
let s = &hello[0...4]
* Здесь переменная s будет строковым срезом &str, который содержит первые 4 байта строки, "Зд" для кирилицы.
----------------------------
Методы перебора строк
for c in "какиенибудь иероглифы".chars() {
  println!("{}", c);
}
* вернет иероглифы
for c in "какиенибудь иероглифы".bytes() {
  println!("{}", c);
}
* вернёт сырые байты, 224 и тд