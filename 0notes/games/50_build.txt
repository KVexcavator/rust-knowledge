Crates and Modules
Ящики и модули
=======================
Программы Rust делятся на контейнеры и модули.
- Контейнеры — это большие группы кода с собственным файлом Cargo.toml
- Контейнеры в основном независимы друг от друга, но каждый может иметь зависимости от других контейнеров и использовать код из них.
- Модуль — это раздел кода внутри контейнера, идентифицируемый по нахождению в отдельном файле или каталоге.
================================
По умолчанию, всё в модуле приватное, что бы сделать доступным извне, ипользуют ключ pub
================================
доступ снаружи use map::my_function и my_function(), или просто map::my_function()
================================
Организация импорта с прелюдией
mod map;

mod prelude {
    pub use bracket_lib::prelude::*;
    pub const SCREEN_WIDTH: i32 = 80;
    pub const SCREEN_HEIGHT: i32 = 50;
    pub use crate::map::*;
}

use prelude::*;
=============================
Константы могут включать только другие константы (включая константные функции).
-----------------------------
Rust обычно использует usize для индексации коллекций и массивов.(того что может измениться)
Если нужно преобразовать другой тип в usize, это делается явно:
let y: usize = x as usize;
==============================
Большинство двухмерных игр представляют свою карту как ряд плиток в сетке. У каждой плитки есть тип, описывающий, как она отображается, и что произойдет, если вы попытаетесь войти в нее.
===============================
#[derive(Copy, Clone, PartialEq)]
- Вызов my_type.clone() создает глубокую копию переменной, не затрагивая оригинал. Если вы клонируете структуру, все, что содержит структура, также будет клонировано.
- Copy изменяет действие по умолчанию при назначении MyType из одной переменной в другую. Вместо перемещения значения он копирует его.
- PartialEq добавляет код, позволяющий сравнивать значения MyType с помощью оператора ==.
==================================